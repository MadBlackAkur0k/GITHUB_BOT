version: '3.8'

services:
  bot:
    build:
      context: ./bot
    container_name: bot_container
    ports:
      - "8000:8000"
    restart: always
    networks:
      custom_network:
        ipv4_address: ${BOT_NETW}
    env_file:
      - .env
    volumes:
      - ./bot/logs:/bot/logs

  db:
    build:
      context: ./db
    container_name: db_container
    user: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
      -c log_replication_commands=on
      -c checkpoint_timeout=180s
    networks:
      custom_network:
        ipv4_address: ${DB_HOST}
    env_file:
      - .env

  db_repl:
    build:
      context: ./db_repl
    container_name: db_repl_container
    ports:
      - 54343:5432
    user: postgres
    environment:
      PGUSER: ${DB_REPL_USER}
      PGPASSWORD: ${DB_REPL_PASSWORD}
      PGDATABASE: ${DB_DATABASE}
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=${DB_HOST} --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - db
    networks:
      custom_network:
        ipv4_address: ${DB_REPL_HOST}
    env_file:
      - .env

networks:
  custom_network:
    ipam:
      config:
        - subnet: ${CONT_NETW}
